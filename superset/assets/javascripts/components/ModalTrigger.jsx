import React, { PropTypes } from 'react';
import { Modal } from 'react-bootstrap';
import Button from './Button';
import cx from 'classnames';
import { Tooltip } from 'antd';

const propTypes = {
    triggerNode: PropTypes.node.isRequired,
    modalHeader: PropTypes.node,
    modalBody: PropTypes.node,  // not required because it can be generated by beforeOpen
    modalFooter: PropTypes.node,
    beforeOpen: PropTypes.func,
    onExit: PropTypes.func,
    isButton: PropTypes.bool,
    bsSize: PropTypes.string,
    className: PropTypes.string
};

const defaultProps = {
    beforeOpen: () => {},
    onExit: () => {},
    isButton: false,
    bsSize: null,
    className: '',
};

export default class ModalTrigger extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showModal: false,
        };
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
    }

    close() {
        this.setState({ showModal: false });
    }

    open(e) {
        e.preventDefault();
        this.props.beforeOpen();
        this.setState({ showModal: true });
    }
    renderModal() {

        return (
            <Modal
                show={this.state.showModal}
                onHide={this.close}
                onExit={this.props.onExit}
                bsSize={this.props.bsSize}
                className={this.props.className}
                >
                <Modal.Header>
                    <div className="popup-header">
                        <div className="header-left">
                            <i className={this.props.modalIcon}/>
                            <span>{this.props.modalTitle}</span>
                        </div>
                        <div className="header-right">
                            <i className="icon icon-close" onClick={this.close}/>
                        </div>
                    </div>
                </Modal.Header>
                <Modal.Body>
                    {this.props.modalBody}
                </Modal.Body>
                {this.props.modalFooter &&
                <Modal.Footer>
                    {this.props.modalFooter}
                </Modal.Footer>
                }
            </Modal>
        );
    }

    render() {
        const classNames = cx({
            'btn btn-default btn-sm': this.props.isButton,
        });
        if (this.props.isButton) {
            return (
                <Tooltip title={this.props.modalTitle} placement="bottom">
                    <Button onClick={this.open}>
                        {this.props.triggerNode}
                        {this.renderModal()}
                    </Button>
                </Tooltip>
            );
        }
        return (
            <Tooltip title={this.props.modalTitle} placement="bottom">
              <span className={classNames} onClick={this.open} role="button">
                {this.props.triggerNode}
                  {this.renderModal()}
              </span>
            </Tooltip>
        );
    }
}

ModalTrigger.propTypes = propTypes;
ModalTrigger.defaultProps = defaultProps;
